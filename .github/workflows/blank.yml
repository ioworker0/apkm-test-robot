# This is a basic workflow to help you get started with Actions

name: TEST-ROBOT

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BRANCH: 28-new

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
        
    permissions:
      # Give the default GITHUB_TOKEN write permission.
      # https://github.blog/changelog/2023-02-02-github-actions-updating-the-default-github_token-permissions-to-read-only/
      contents: write
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: checkout repository
      uses: actions/checkout@v2

    - name: read previous commit ID
      id: read-previous-commit-id
      run: |
        echo "PREVIOUS_COMMIT_ID=$(cat previous_commit_id.txt)" > output.env
        echo $(cat output.env)

    - name: get latest commit ID
      id: get-latest-commit-id
      run: |
        echo "LATEST_COMMIT_ID=$(git ls-remote https://github.com/ioworker0/linux.git refs/heads/${{ env.BRANCH }} | awk '{print $1}')" >> output.env
        echo $(cat output.env)
        echo $LATEST_COMMIT_ID > previous_commit_id.txt
    
    - name: commit and push changes
      run: |
        source output.env
        if [ "$PREVIOUS_COMMIT_ID" = "$LATEST_COMMIT_ID" ]; then
          echo "Commit ID has not changed. No action needed :P"
        else
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          if git status --porcelain | grep -q "^ M previous_commit_id.txt"; then
           git add previous_commit_id.txt
           git commit -m "Update previous commit ID"
           git push origin main
          fi
        fi

    - name: system resources
      run: |      
        uname -r
        uname -m
        echo $(nproc)
        free -h

    - name: clone lance repo
      run: |   
        source output.env
        # if [ "$PREVIOUS_COMMIT_ID" != "$LATEST_COMMIT_ID" ]; then
        #   git clone -v https://github.com/ioworker0/linux.git
        # fi
        sudo apt install gcc-11-aarch64-linux-gnu -y
        
    - name: build kernel
      run: |  
        source output.env
        # if [ "$PREVIOUS_COMMIT_ID" != "$LATEST_COMMIT_ID" ]; then
          # cd linux
          # git checkout ${{ env.BRANCH }} && git pull
          # make mrproper
          # make allnoconfig
          # make olddefconfig
          # make -j$(nproc)
        # fi
        
